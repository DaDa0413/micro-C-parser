/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <string.h>
extern YYSTYPE yylval; //YYSTYPE
extern int yylineno;
char buf[256];
char table_buf[1024];
char error_buf[128];
int scope = 0;
int table_flag = 0;
int semantic_error_flag = 0;
int syntactic_error_flag = 0;
/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { strcat(buf, yytext); return '+'; }
"-" 	{ strcat(buf, yytext); return '-'; }
"*" 	{ strcat(buf, yytext); return '*'; }
"/" 	{ strcat(buf, yytext); return '/'; }
"%"     { strcat(buf, yytext); return '%'; }
"++"    { strcat(buf, yytext); return INC; }
"--"    { strcat(buf, yytext); return DEC;}

 /* Relational */
">"		{ strcat(buf, yytext); return '>'; }
"<"		{ strcat(buf, yytext); return '<'; }
">="	{ strcat(buf, yytext); return MTE; }
"<="	{ strcat(buf, yytext); return LTE; }
"=="	{ strcat(buf, yytext); return EQ; }
"!="	{ strcat(buf, yytext); return NE; }

 /* Assignment */
"="		{ strcat(buf, yytext); return '='; }
"+="	{ strcat(buf, yytext); return ADDASGN; }
"-="	{ strcat(buf, yytext); return SUBASGN; }
"*="	{ strcat(buf, yytext); return MULASGN; }
"/="	{ strcat(buf, yytext); return DIVASGN; }
"%="	{ strcat(buf, yytext); return MODASGN; }

 /* Logical */
"&&"	{ strcat(buf, yytext); return AND; }
"||"	{ strcat(buf, yytext); return OR; }
"!"		{ strcat(buf, yytext); return '!'; }

 /* Delimiters */
"("		{ strcat(buf, yytext); return '('; }
")"		{ strcat(buf, yytext); return ')'; }
"{"		{ ++scope; strcat(buf, yytext); return '{'; }
"}"		{ --scope; strcat(buf, yytext); return '}'; }
"["		{ strcat(buf, yytext); return '['; }
"]"		{ strcat(buf, yytext); return ']'; }
","		{ strcat(buf, yytext); return ','; }

 /* Print Keywords */	
"print"		{ strcat(buf, yytext); return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ strcat(buf, yytext); return IF; }
"else"		{ strcat(buf, yytext); return ELSE; }
"for"		{ strcat(buf, yytext); return FOR; }
"while"		{ strcat(buf, yytext); return WHILE; }

 /* Declaration Keywords */
"void"		{ strcat(buf, yytext); return VOID; }
"int"		{ strcat(buf, yytext); return INT; }
"float"  	{ strcat(buf, yytext); return FLOAT; }
"string"  	{ strcat(buf, yytext); return STRING; }
"bool"  	{ strcat(buf, yytext); return BOOL;}

 /* boolean Keywords */
"true"      { strcat(buf, yytext); return TRUE; }
"false"     { strcat(buf, yytext); return FALSE; }

"return"    { strcat(buf, yytext); return RET; }

 /* String Constant */
\"				        { strcat(buf, yytext); BEGIN STRING_STATE; }
<STRING_STATE>\"		{ strcat(buf, yytext); BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ strcat(buf, yytext); yylval.const_value.string = strdup(yytext); return STR_CONST; }

 /* Number Constant */
{integer}	{ strcat(buf, yytext); yylval.const_value.i_val = atoi(yytext); return I_CONST; }
{float}	    { strcat(buf, yytext); yylval.const_value.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ strcat(buf, yytext); BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ strcat(buf, yytext);  }
<COMMENT>\n			{ 
					  strcat(buf, yytext); 
					  printf("%d: %s", yylineno, buf);
					  memset(buf, 0, sizeof(buf)); 
					}
<COMMENT>"*"		{ strcat(buf, yytext);  }
<COMMENT>"*/"		{ strcat(buf, yytext);  BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ strcat(buf, yytext);  }

 /* Variable ID */
 {id}       { strcat(buf, yytext); yylval.id = strdup(yytext); return ID; }

 /* others */

[;]         { strcat(buf, yytext); return ';'; }
[\n]        { 
			  strcat(buf, yytext); 
			  if(!strcmp(buf, "\n"))
				printf("%d:%s", yylineno, buf);
			  else
				printf("%d: %s", yylineno, buf);
			  if(!semantic_error_flag)
				memset(buf, 0, sizeof(buf));  
			  if(table_flag)
	  	  	  	printf("%s", table_buf);
			  table_flag = 0;
			  if(semantic_error_flag)
			  {
				    printf("\n|-----------------------------------------------|\n");
				    printf("| Error found in line %d: %s", yylineno, buf);
				    printf("| %s", error_buf);
				    printf("\n|-----------------------------------------------|\n\n");
					semantic_error_flag = 0;
					memset(buf, 0, sizeof(buf));
					memset(error_buf, 0, sizeof(buf));
			  }
			}
[ \t]		{ strcat(buf, yytext); } /* Ignore */
[^ \t\n] 	{ strcat(buf, yytext); } /* Ignore other charactor sets */
<<EOF>>     { strcat(buf, yytext); return END_OF_FILE; }

%%
int yywrap()
{
    return 1;
}
